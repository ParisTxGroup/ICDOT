# Generated by Django 3.2.10 on 2022-02-25 09:59

import bhot.transplants.models.file_upload
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Biopsy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('biopsy_date', models.DateField()),
                ('pre_transplant_biopsy_type', models.CharField(blank=True, choices=[('preimplantation', 'preimplantation'), ('procurement', 'procurementt')], max_length=100)),
                ('clinical_biopsy_indication', models.CharField(blank=True, choices=[('protocol', 'protocol'), ('DGF', 'Delayed Graft Function'), ('Slow deterioration', 'Slow deterioration (progressive increase in serum creatinine over time)'), ('ARF', 'Acute renal failure'), ('Proteinuria', 'Proteinuria'), ('Hematuria', 'Hematuria'), ('SUSP_AR', 'Suspicious for acute rejection'), ('SUSP_PVN', 'Suspicious for Polyoma Virus Nephropathy'), ('Transplantectomy', 'Transplantectomy biopsy'), ('de novo DSA', 'de novo DSA'), ('Follow-up', 'Follow-up from previous biopsy')], max_length=100)),
                ('biopsy_creatinemia', models.FloatField(blank=True, null=True)),
                ('biopsy_creatinemia_units', models.CharField(choices=[('umol/L', 'umol/L'), ('mg/L', 'mgdL')], default='umol/L', max_length=50)),
                ('biopsy_creatinuria', models.FloatField(blank=True, null=True)),
                ('biopsy_creatinuria_units', models.CharField(choices=[('mmol/L', 'mmol/L')], default='mmol/L', max_length=50)),
                ('biopsy_proteinuria', models.FloatField(blank=True, null=True)),
                ('biopsy_proteinuria_units', models.CharField(choices=[('g/g', 'g/g'), ('g/24h', 'g/24h'), ('mg/dL', 'mg/dL'), ('g/L', 'g/L'), ('mg/mmol', 'mg/mmol'), ('g/mmol', 'g/mmol')], default='mg/dL', max_length=50)),
                ('biopsy_proteinuria_dipstick', models.CharField(blank=True, max_length=20)),
                ('biopsy_proteinuria_dipstick_units', models.CharField(choices=[('mg/dL range', 'mg/dL range')], default='mg/dL range', max_length=50)),
                ('biopsy_proteinuria_date', models.DateField(blank=True, null=True)),
                ('biopsy_prot_creat_ratio', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(30.0)], verbose_name='Protein/creatinine ratio (g/g)')),
                ('biopsy_prot_creat_ratio_units', models.CharField(choices=[('g/g', 'g/g')], default='g/g', max_length=50)),
                ('biopsy_immunosuppressants', models.CharField(blank=True, choices=[('Abatacept', 'Abatacept'), ('Azathioprine', 'Azathioprine'), ('Belatacept', 'Belatacept'), ('Cyclosporine', 'Cyclosporine'), ('Everolimus', 'Everolimus'), ('MMF', 'MMF'), ('MPA', 'MPA'), ('Prednisone', 'Sirolimus'), ('Sirolimus', 'Azathioprine'), ('Tacrolimus', 'Tacrolimus')], max_length=100, verbose_name='Immunosuppresants')),
                ('biopsy_immunosuppressant_dose', models.FloatField(blank=True, choices=[('mg/day', 'mg/day'), ('mg twice per day', 'mg twice per day'), ('mg per week', 'mg per week'), ('mg per 15 days', 'mg per 15 days')], null=True, verbose_name='Immunosuppresant dose')),
                ('biopsy_immunosuppressant_c0', models.FloatField(blank=True, null=True, verbose_name='immunosuppressant postdose level: C2 (ng/mL)')),
                ('biopsy_rejection_treatment', models.CharField(blank=True, choices=[('Alemtuzumab', 'Alemtuzumab'), ('Bortezomib', 'Bortezomib'), ('Anti-thymocyte globulin', 'Anti-thymocyte globulin'), ('Eculizimab', 'Eculizimab'), ('IVIG', 'IVIG'), ('Plasmapharesis', 'Plasmapharesis'), ('Rituximab', 'Rituximab')], max_length=100, verbose_name='rejection treatment')),
                ('biopsy_treatment_start_date', models.DateField(blank=True, null=True)),
                ('biopsy_treatment_response', models.CharField(blank=True, choices=[('Complete response', 'Complete response (Cr within 10% of baseline)'), ('Partial response', 'Partial response (Cr 10-50% over baseline) '), ('No response', 'No response (Cr >50% increase over baseline)')], max_length=100, verbose_name='Rejection treatment response')),
                ('biopsy_rejection_date', models.DateField(blank=True, null=True)),
                ('biopsy_dd_cf_dna', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Donor-derived cf-DNA (%)')),
                ('biopsy_bkv_load', models.IntegerField(blank=True, null=True, verbose_name='BKV load (copies/mL)')),
                ('biopsy_cmv_load', models.IntegerField(blank=True, null=True, verbose_name='CMV load (copies/mL)')),
                ('biopsy_ebv_load', models.IntegerField(blank=True, null=True, verbose_name='EBV load (copies/mL)')),
                ('dsa_at_biopsy', models.BooleanField(blank=True, null=True)),
                ('preformed_dsa', models.BooleanField(blank=True, null=True)),
                ('history_dsa', models.BooleanField(blank=True, null=True)),
                ('immunodominant_dsa_class', models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('I/II', 'I/II')], max_length=50)),
                ('i_dsa_specificity', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('Cw', 'Cw'), ('DR', 'DR'), ('DQ', 'DQ'), ('DP', 'DP')], max_length=50)),
                ('i_dsa_mfi', models.IntegerField(blank=True, null=True, verbose_name='iDSA MFI')),
                ('c1q_binding', models.BooleanField(blank=True, null=True, verbose_name='C1q binding')),
                ('non_anti_hla_dsa', models.BooleanField(blank=True, null=True, verbose_name='non anti-HLA DSA')),
                ('non_anti_hla_dsa_type', models.CharField(blank=True, choices=[('AT1R', 'AT1R'), ('MICA', 'MICA'), ('ECXM', 'ECXM'), ('vimentin', 'vimentin'), ('collagen', 'collagen'), ('K-a-1', 'K-a-1'), ('tubulin', 'tubulin')], max_length=100)),
                ('graft_failure_cause', models.CharField(blank=True, choices=[('death', 'death'), ('infection', 'infection'), ('recurrent disease', 'recurrent disease'), ('rejection', 'rejection')], max_length=100)),
                ('graft_failure_date', models.DateField(blank=True, null=True)),
                ('ci_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('ct_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('cv_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('ah_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)])),
                ('percent_glomerulosclerosis', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='percent sclerotic glomeruli')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biopsy_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biopsy_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'biopsies',
            },
        ),
        migrations.CreateModel(
            name='Transplant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transplant_date', models.DateField()),
                ('donor_ref', models.CharField(max_length=256)),
                ('recipient_ref', models.CharField(max_length=256)),
                ('donor_record_date', models.DateField()),
                ('donor_sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('donor_criteria', models.CharField(blank=True, choices=[('SCD', 'Standard Donor Criteria'), ('ECD', 'Expanded Donor Criteria')], max_length=100)),
                ('donor_egfr', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(500.0)], verbose_name='Donor eGFR (mL/min/1.73m2)')),
                ('donor_proteinuria', models.FloatField(blank=True, null=True)),
                ('donor_proteinuria_units', models.CharField(choices=[('g/g', 'g/g'), ('g/24h', 'g/24h'), ('mg/dL', 'mg/dL'), ('g/L', 'g/L'), ('mg/mmol', 'mg/mmol'), ('g/mmol', 'g/mmol')], default='g/g', max_length=50)),
                ('recipient_record_date', models.DateField()),
                ('pre_transplant_dialysis', models.BooleanField(blank=True, null=True)),
                ('time_on_dialysis', models.IntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transplant_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transplant_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SequencingData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sequencing_date', models.DateField()),
                ('file_ref', models.CharField(blank=True, max_length=256)),
                ('file_path', models.FileField(editable=False, null=True, upload_to='')),
                ('biopsy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='transplants.biopsy')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sequencingdata_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sequencingdata_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'sequencing data',
            },
        ),
        migrations.CreateModel(
            name='Histology',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('histology_date', models.DateField()),
                ('biopsy_assessment', models.CharField(blank=True, choices=[('frozen', 'frozen'), ('paraffin', 'paraffin'), ('electron microscopy', 'electron microscopy')], max_length=100)),
                ('biopsy_method', models.CharField(blank=True, choices=[('core', 'core'), ('needle', 'needle'), ('wedge', 'wedge')], max_length=100, null=True)),
                ('tissue_technique', models.CharField(blank=True, choices=[('frozen', 'frozen'), ('paraffin', 'paraffin'), ('acidified formal alcohol', 'acidified formal alcohol (AFA)')], max_length=100, null=True)),
                ('num_cores', models.IntegerField(blank=True, null=True, verbose_name='number of cores')),
                ('num_glomeruli', models.IntegerField(blank=True, null=True, verbose_name='number of glomeruli')),
                ('num_glomerulosclerosis', models.IntegerField(blank=True, null=True, verbose_name='number of global glomerulosclerosis')),
                ('num_sclerotic_glomeruli', models.IntegerField(blank=True, null=True, verbose_name='number of segmentally sclerotic glomeruli')),
                ('num_arteries', models.IntegerField(blank=True, null=True, verbose_name='number of arteries')),
                ('fsgs_type', models.CharField(blank=True, choices=[('cellular', 'cellular'), ('collapsing', 'collapsing'), ('not otherwise specified', 'not otherwise specified (NOS)'), ('perihiliar', 'perihiliar'), ('tip', 'tip')], max_length=100, verbose_name='FSGS type')),
                ('biopsy_quality', models.CharField(blank=True, choices=[('adequate', 'adequate'), ('minimal', 'minimal')], max_length=100, verbose_name='Biopsy quality')),
                ('ati', models.BooleanField(blank=True, null=True, verbose_name='Acute Tubular Injury (ATI)')),
                ('tma', models.BooleanField(blank=True, null=True, verbose_name='Thrombotic Microangiopathy')),
                ('tma_location', models.CharField(blank=True, choices=[('arteriolar', 'arteriolar'), ('glomerular', 'glomerular'), ('both', 'both')], max_length=100, verbose_name='TMA location')),
                ('g_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='glomerulitis (g)')),
                ('ptc_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='peritubular capillaritis (ptc)')),
                ('i_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='interstitial inflammation (i)')),
                ('t_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='tubulitis (t)')),
                ('v_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='intimal arteritis (v)')),
                ('cg_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='Glomerular Basement Membrane double contours (cg)')),
                ('ci_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='interstitial fibrosis (ci)')),
                ('ct_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='tubular atrophy (ct)')),
                ('cv_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='vascular fibrous intimal thickening (cv))')),
                ('ah_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='artieriolar hyalinosis (ah)')),
                ('mm_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='mesangial matrix expansion (mm)')),
                ('ti_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='total inflammation (ti)')),
                ('i_ifta_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='inflammation in the area of IFTA (i-IFTA)')),
                ('t_ifta_score', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='tubulitis in the area of IFTA (t-IFTA)')),
                ('percent_cortex_if', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='percent cortex with inflammation and fibrosis')),
                ('percent_ifta', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='IFTA %')),
                ('chronic_allograft_arteriopathy', models.BooleanField(blank=True, null=True, verbose_name='chronic allograft arteriopathy')),
                ('pvl_load', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='PVL (polyomavirus replication/load level)')),
                ('mesangial_hypercellularity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='mesangial hypercellularity')),
                ('crescents', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='mesangial hypercellularity')),
                ('glomerular_thrombi', models.BooleanField(blank=True, null=True, verbose_name='glomerular thrombi')),
                ('arterial_thrombi', models.BooleanField(blank=True, null=True, verbose_name='arterial/arteriolar thrombi')),
                ('plasma_cell_if', models.CharField(blank=True, choices=[('no', 'no'), ('minimal', 'minimal'), ('moderate', 'moderate'), ('extensive', 'extensive')], max_length=50, verbose_name='interstitial inflammation by plasma cells')),
                ('eosinophil_cell_if', models.CharField(blank=True, choices=[('no', 'no'), ('minimal', 'minimal'), ('moderate', 'moderate'), ('extensive', 'extensive')], max_length=50, verbose_name='interstitial inflammation by eosinophils')),
                ('sv40t', models.BooleanField(blank=True, null=True, verbose_name='SV40-T')),
                ('other_ihc', models.CharField(blank=True, max_length=200, verbose_name='other immunohistochemistry (IHC)')),
                ('electron_dense_deposits', models.BooleanField(blank=True, null=True, verbose_name='electron dense deposits')),
                ('edd_substructre', models.BooleanField(blank=True, null=True, verbose_name='EDD substructure')),
                ('edd_location', models.CharField(blank=True, choices=[('mesangial', 'mesangial'), ('subepithelial', 'subepithelial'), ('subendothelial', 'subendothelial')], max_length=100, verbose_name='EDD location')),
                ('gbm_duplication', models.BooleanField(blank=True, null=True, verbose_name='GBM duplication')),
                ('endothelial_activation', models.CharField(blank=True, choices=[('hypertrophy', 'hypertrophy'), ('loss of fenestrations', 'loss of fenestrations'), ('subendothelial lucency', 'subendothelial lucency')], max_length=100, verbose_name='endothelial activation')),
                ('transplant_glomerulopathy', models.CharField(blank=True, choices=[('cg0', 'cg0'), ('cg1a', 'cg1a'), ('cg1b', 'cg1b'), ('cg2', 'cg2'), ('cg3', 'cg3')], max_length=100, verbose_name='transplant glomerulopathy (cg)')),
                ('ptcml', models.CharField(blank=True, choices=[('normal', 'normal (<3 layers)'), ('3-6 layers ', '3-6 layers '), ('≥7 layers and ≥5 in at least 2', '≥7 layers in one cortical PTC and ≥5 layers in two additional capillaries ')], max_length=100, verbose_name='Peritubular Capillary Basement Membrane Multilayering (PTCML)')),
                ('other_em', models.CharField(blank=True, max_length=200, verbose_name='other electron microscopy (EM)')),
                ('igg_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='IgG staining')),
                ('igg_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='IgG pattern/location')),
                ('iga_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='IgA staining')),
                ('iga_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='IgA pattern/location')),
                ('igm_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='IgM staining')),
                ('igm_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='IgM pattern/location')),
                ('c1q_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='C1q staining')),
                ('c1q_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='C1q pattern/location')),
                ('c3_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='C3 staining')),
                ('c3_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='C3 pattern/location')),
                ('kappa_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='kappa staining')),
                ('kappa_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='kappa pattern/location')),
                ('lambda_staining', models.CharField(blank=True, choices=[('0', '0'), ('+', '+'), ('++', '++'), ('+++', '+++')], max_length=10, verbose_name='lambda staining')),
                ('lambda_location', models.CharField(blank=True, choices=[('granular/capillary wall', 'granular/capillary wall'), ('granular/mesangial', 'granular/mesangial'), ('linear/capillary wall', 'linear/capillary wall'), ('linear/mesangial', 'linear/mesangial')], max_length=100, verbose_name='lambda pattern/location')),
                ('fibrin_deposition', models.CharField(blank=True, choices=[('crescent', 'crescent'), ('interstitial', 'interstitial'), ('mesangial', 'mesangial'), ('segmental glomeruli', 'segmental glomeruli')], max_length=100, verbose_name='fibrin deposition')),
                ('principal_diagnosis', models.CharField(blank=True, choices=[('inadequate for diagnosis', 'inadequate for diagnosis'), ('normal', 'normal'), ('no evidence of rejection', 'no evidence of rejection'), ('active AMR', 'active AMR'), ('chronic active AMR', 'chronic active AMR'), ('chronic AMR', 'chronic AMR'), ('acute TCMR', 'acute TCMR'), ('chronic active TCMR', 'chronic active TCMR'), ('mixed rejection', 'mixed rejection'), ('C4dNER', 'C4d with no evidence of rejection'), ('polyomavirus nephropathy', 'polyomavirus nephropathy'), ('CNI toxicity', 'CNI toxicity'), ('recurrent glomerulonephritis', 'recurrent glomerulonephritis'), ('de novo glomerulonephritis', 'de novo glomerulonephritis'), ('acute tubular injury', 'acute tubular injury (ATI)'), ('donor disease', 'donor disease'), ('IFTA NOS', 'IFTA NOS'), ('Arteriosclerosis', 'arteriosclerosis')], max_length=200, verbose_name='principal diagnosis')),
                ('principal_diagnosis_other', models.CharField(blank=True, max_length=200, verbose_name='principal diagnosis (other)')),
                ('rejection_diagnosis', models.CharField(blank=True, choices=[('no evidence of rejection', 'no evidence of rejection'), ('inadequate for  assessment of rejection', 'inadequate for  assessment of rejection'), ('active AMR', 'active AMR'), ('chronic active AMR', 'chronic active AMR'), ('chronic AMR', 'chronic AMR'), ('acute TCMR', 'acute TCMR'), ('chronic active TCMR', 'chronic active TCMR'), ('mixed rejection', 'mixed rejection'), ('C4dNER', 'C4D deposition without morphologic evidence for active rejection'), ('Borderline/Suspicious for acute TCMR', 'Borderline/Suspicious for acute TCMR'), ('acute TCMR IA', 'acute TCMR IA'), ('acute TCMR IB', 'acute TCMR IB'), ('acute TCMR IIA', 'acute TCMR IIA'), ('acute TCMR IIB', 'acute TCMR IIB'), ('acute TCMR III', 'acute TCMR III'), ('chronic active TCMR IA', 'chronic active TCMR IA'), ('chronic active TCMR IB', 'chronic active TCMR IB'), ('chronic active TCMR II', 'chronic active TCMR II')], max_length=200, verbose_name='rejection diagnosis')),
                ('non_rejection_diagnosis', models.CharField(choices=[('Normal biopsy or nonspecific changes', 'Normal biopsy or nonspecific changes'), ('inadequate for  assessment of rejection', 'inadequate for  assessment of rejection'), ('Rejection only-no additional pathological abnormalities', 'Rejection only-no additional pathological abnormalities'), ('other pathology', 'other pathology'), ('glomerular ischemia', 'glomerular ischemia'), ('infarction', 'infarction'), ('ATI: not otherwise specified', 'ATI: not otherwise specified'), ('ATI: suspicious for CNI toxicity', 'ATI: suspicious for CNI toxicity'), ('TMA: not otherwise specified', 'TMA: not otherwise specified'), ('TMA: acute glomerular involvement', 'TMA: acute glomerular involvement on LM'), ('TMA: subacute/chronic glomerular involvement on LM', 'TMA: subacute/chronic glomerular involvement on LM'), ('TMA: acute arteriolar/arterial involvement', 'TMA: acute arteriolar/arterial involvement on LM'), ('TMA: subacute/chronic arteriolar/arterial involvement on LM', 'TMA: subacute/chronic arteriolar/arterial involvement on LM'), ('TMA: EM features only', 'TMA: EM features only'), ('IFTA: NOS', 'IFTA: not otherwise specified'), ('IFTA1: Mild', 'IFTA1: Mild'), ('IFTA2: Moderate', 'IFTA2: Moderate'), ('IFTA3: Severe', 'IFTA3: Severe'), ('Significant vascular pathology', 'Significant vascular pathology'), ('Significant arterial intimal thickening', 'Significant arterial intimal thickening'), ('arterial intimal fibrosis (non-inflammatory)', 'Arterial intimal fibrosis (non-inflammatory)'), ('arterial intimal thickening without fibroelastosis', 'Arterial intimal thickening without fibroelastosis (at least partially)'), ('significant arteriolar hyalinosis', 'significant arteriolar hyalinosis'), ('significant arteriolar hyalinosis-likely donor-derived', 'significant arteriolar hyalinosis-likely donor-derived'), ('significant arteriolar hyalinosis - suspicious for CNI toxicity', 'significant arteriolar hyalinosis - suspicious for CNI toxicity'), ('infection: not otherwise specified', 'infection: not otherwise specified'), ('infection: neutrophilic pyelonephritis/Suspicious for pyelonephritis', 'infection: neutrophilic pyelonephritis/Suspicious for pyelonephritis'), ('infection: BK virus nephropathy', 'infection: BK virus nephropathy'), ('infection: granulomatous', 'infection: granulomatous'), ('Polyomavirus Nephropathy Class 1', 'Polyomavirus Nephropathy Class 1'), ('Polyomavirus Nephropathy Class 2', 'Polyomavirus Nephropathy Class 2'), ('Polyomavirus Nephropathy Class 3', 'Polyomavirus Nephropathy Class 3'), ('glomerular disease: not otherwise specified', 'Gd Nos'), ('glomerular disease: immune complex, not otherwise specified', 'immune complex, not otherwise specifie'), ('glomerular disease: immune complex, IgA', 'immune complex, IgA'), ('glomerular disease: immune complex, membranous', 'glomerular disease: immune complex, membranous'), ('glomerular disease: immune complex, Lupus nephritis', 'glomerular disease: immune complex, Lupus nephritis'), ('glomerular disease: C3 glomerulopathy', 'C3 glomerulopathy'), ('glomerular disease: FSGS', 'FSGS'), ('glomerular disease: FSGS, likely recurrent', 'FSGS, likely recurrent'), ('glomerular disease: diabetic change', 'glomerular disease: diabetic change'), ('glomerular disease: paraprotein-related', 'glomerular disease: paraprotein-related'), ('tubulointerstitial disease: not otherwise specified', 'tubulointerstitial disease'), ('tubulointerstitial disease: granulomatous TIN', 'tubulointerstitial disease: granulomatous TIN'), ('tubulointerstitial disease: drug-induced TIN', 'tubulointerstitial disease: drug-induced TIN'), ('neoplasia: not otherwise specified', 'neoplasia'), ('preneoplasia/suspicious for neoplasia', 'preneoplasia/suspicious for neoplasia'), ('post-transplant lymphoproliferative disease', 'post-transplant lymphoproliferative disease')], max_length=200, verbose_name='non-rejection diagnosis')),
                ('diagnosis_comments', models.CharField(blank=True, max_length=400, verbose_name='diagnosis comments')),
                ('biopsy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='transplants.biopsy')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='histology_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='histology_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'histologies',
            },
        ),
        migrations.CreateModel(
            name='FileUploadBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fileuploadbatch_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fileuploadbatch_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'file upload batches',
            },
        ),
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_ref', models.CharField(max_length=256)),
                ('file_path', models.FileField(upload_to=bhot.transplants.models.file_upload.RandomFileName('upload'))),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='transplants.fileuploadbatch')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fileupload_created', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fileupload_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='biopsy',
            name='transplant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='transplants.transplant'),
        ),
    ]
