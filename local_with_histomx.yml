version: '3'

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}

services:
  django:
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: icdot_local_django
    container_name: django
    depends_on:
      - histomx
      - postgres
      - mailhog
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    ports:
      - "8000:8000"
    command: /start

  histomx:
    build:
      context: .
      dockerfile: ./compose/local/histomx/Dockerfile
    image: icdot_local_histomx
    container_name: histomx
    environment:
      - 'HISTOMX_TEMPLATES={"DEFAULT": "/histomx/scripts/histomx_kidney.Rmd"}'
    volumes:
      # Sadly rmarkdown must have rw access to be able to knit.
      # As long as we're running only trusted code that's fine.
      - ${HISTOMX_REPO_PATH}:/histomx:rw

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: icdot_production_postgres
    container_name: postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres

  docs:
    image: icdot_local_docs
    container_name: docs
    build:
      context: .
      dockerfile: ./compose/local/docs/Dockerfile
    env_file:
      - ./.envs/.local/.django
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./icdot:/app/icdot:z
    ports:
      - "7000:7000"
    command: /start-docs

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: mailhog
    ports:
      - "8025:8025"
